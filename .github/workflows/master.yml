# This is a basic workflow to help you get started with Actions

name: CI/CD workflow Diamant 

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main-v2 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_PATH: KataDuDiamant/KataDuDiamant.csproj #variable d'environnement du workflow (path vers le projet)
  TEST_PROJECT_PATH: TestKataDuDiamant/TestKataDuDiamant.csproj

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - uses: actions/setup-dotnet@v1 #action qui installe .NET sur la machine virtuelle
        with:
          dotnet-version: 3.1.x  #mettre la version .NET de votre projet WPF 
      
      - name: Dependances
        run: dotnet restore ${{ env.PROJECT_PATH }} #restaure les dépendances du projet
      
      - name: Build      
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore #build le projet

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test
        
      - name: Publish
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true --no-build

      #crée une 'release' sur votre repo github 
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          
      #pousse l'exécutable dans la 'release' github créée précédament
      - uses: csexton/release-asset-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: TP214E/bin/Release/netcoreapp3.1/win-x64/publish/*.exe #path vers votre exécutable
          release-url: ${{ steps.create_release.outputs.upload_url }}
